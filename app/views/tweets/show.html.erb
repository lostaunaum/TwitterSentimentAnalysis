<!-- MATH LOGIC IN ORDER TO GET AVERAGES COUNTS ETC -->
<% user = User.find(params[:user_id]) %>

<div class="row">
<div class="col-sm-2"></div>
	<div class="col-xs-12 col-sm-6 col-md-8">
		<div class="showPage">
			<h1>You are a <%= @result %> tweeter!!</h1>
			<% @user[:result] = @result %> 
			<% @user.save %> 

			<div class="slide-wrap">
			  <div class="slide-mask">
			    <ul class="slide-group">
			      <li class="slide">Ratings Graph<canvas id="myChart" width="600" height="400"></canvas></li>
			      <li class="slide">Average Score Comparison<canvas id="myChartBar" width="600" height="400"></canvas></li>      
			      <li class="slide">Tweet Timeline<canvas id="myChartLine" width="600" height="400"></canvas></li>
			    </ul>
			  </div>
			  
			  <div class="slide-nav">
			    <ul>
			      <li class="bullet"></li>
			      <li class="bullet"></li>
			      <li class="bullet"></li>      
			    </ul>
			  </div>
			</div>

			<h2>These are the tweets evaluated with the top positive and negative scores</h2>
			
			<div class="tweetBlocks">
				<h2>Highest Positve Score: <%= number_with_precision(@max_score_positive[:max]*100, :precision => 2) + "%" %></h2>
				<blockquote class="twitter-tweet"><p><%= @max_score_positive[:posTweetText]%></p><a href="https://twitter.com/<%= @user.nickname %>"></a>-<%= @user.name %> (@<%= @user.nickname %>)</blockquote>
				<h2>Lowest Negative Score: <%= number_with_precision(@max_score_negative[:max]*100, :precision => 2) + "%" %> </h2>
				<blockquote class="twitter-tweet"><p><%= @max_score_negative[:negTweetText]%></p><a href="https://twitter.com/<%= @user.nickname %>"></a>-<%= @user.name %> (@<%= @user.nickname %>)</blockquote>	
			</div>

			<div class="scoreShare">
				<%= link_to 'Share your score on Twitter!', user_tweets_path, :method => :get %>
			</div>
		</div>
	</div>
</div>

	<!-- ################################################ -->

	<script>
		var ctx = $("#myChart").get(0).getContext("2d");
		var data = [
	    {
	        value: <%= @positive[:count] %>,
	        color: "rgba(180,180,180,0.6)",
	        highlight: "rgba(220,220,220,1)",
	        label: "Positive"
	    },
	    {
	        value: <%= @negative[:count] %>,
	        color: "rgba(110,110,110,0.6)",
	        highlight: "rgba(220,220,220,1)",
	        label: "Negative"
	    },
	    {
	        value: <%= @neutral[:count] %>,
	        color: "rgba(20,20,20,0.6)",
	        highlight: "rgba(220,220,220,1)",
	        label: "Neutral"
	    }
		]
		var myPieChart = new Chart(ctx).Pie(data, {
		    animateScale: true
		});
	</script>

	<!-- ################################################ -->




	<script>
		// var Chart = Chart.noConflict();
		// Get context with jQuery - using jQuery's .get() method.
		var ctx = $("#myChartBar").get(0).getContext("2d");
		// This will get the first returned node in the jQuery collection.
		// var myNewChart = new Chart(ctx);
			
		var data = {
		    labels: ["Overall Positive vs Overall Negative"],
		    datasets: [
		        {
		            label: "Average Positive Score",
		            fillColor: "rgba(180,180,180,0.6)",
		            strokeColor: "rgba(220,220,220,0.8)",
		            highlightFill: "rgba(220,220,220,1)",
		            highlightStroke: "rgba(220,220,220,1)",
		            data: [Math.floor(<%= @positiveAverage %>)]
		        },
		        {
		            label: "Average Negative Score",
		            fillColor: "rgba(110,110,110,0.6)",
		            strokeColor: "rgba(151,187,205,0.8)",
		            highlightFill: "rgba(220,220,220,1)",
		            highlightStroke: "rgba(151,187,205,1)",
		            data: [Math.floor(<%= @negativeAverage %>)]
		        }
		    ]
		};
		var myChartBar = new Chart(ctx).Bar(data, {
		    animateScale: true
		});
	</script>

	<!-- ################################################ -->


	<script>
		var ctx = $("#myChartLine").get(0).getContext("2d");
		var score_data = <%= raw @scores_array.to_json %>;
		var score_data_100 = []
		var tweetTimeLine = []
		for (var i = 0; i < score_data.length; i++) {
	    	score_data_100.push(Math.floor((score_data[i] * 100)))
	    	tweetTimeLine.push(i + 1)
		}
		var data = {
		    labels: tweetTimeLine,
		    datasets: [
		        {
		            label: "Tweet Timeline",
		            fillColor: "rgba(220,220,220,0.2)",
		            strokeColor: "rgba(220,220,220,1)",
		            pointColor: "rgba(220,220,220,1)",
		            pointStrokeColor: "#fff",
		            pointHighlightFill: "#fff",
		            pointHighlightStroke: "rgba(220,220,220,1)",
		            data: score_data_100
		        },
		    ]
		};
		var myChartLine = new Chart(ctx).Line(data, {
		    animateScale: true,
		    bezierCurve: false,
		});
	</script>

	<!-- ################################################ -->
